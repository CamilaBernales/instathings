webpackHotUpdate("static\\development\\pages\\products\\[id].js",{

/***/ "./pages/products/[id].js":
/*!********************************!*\
  !*** ./pages/products/[id].js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/styled-base */ "./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/router */ "./node_modules/next/dist/client/router.js");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../firebase */ "./firebase/index.js");
/* harmony import */ var _components_layout_404__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../components/layout/404 */ "./components/layout/404.js");
/* harmony import */ var _components_layout_Layout__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../components/layout/Layout */ "./components/layout/Layout.js");
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
/* harmony import */ var react_spinners_ClockLoader__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-spinners/ClockLoader */ "./node_modules/react-spinners/ClockLoader.js");
/* harmony import */ var react_spinners_ClockLoader__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(react_spinners_ClockLoader__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var date_fns_formatDistanceToNow__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-fns/formatDistanceToNow */ "./node_modules/date-fns/esm/formatDistanceToNow/index.js");
/* harmony import */ var _components_ui_Form__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../components/ui/Form */ "./components/ui/Form.js");
/* harmony import */ var _components_ui_Boton__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../components/ui/Boton */ "./components/ui/Boton.js");






var _this = undefined,
    _jsxFileName = "C:\\Users\\Camila Bernales\\Documents\\Programacion\\REACT\\next-project\\pages\\products\\[id].js",
    _s = $RefreshSig$();

var __jsx = react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }













var Position = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_4__["default"])("div", {
  target: "e1a6wohe0",
  label: "Position"
})(false ? undefined : {
  name: "1x6gu24",
  styles: "display:flex;justify-content:center;align-items:center;margin-top:45vh;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var ContainerProduct = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_4__["default"])("div", {
  target: "e1a6wohe1",
  label: "ContainerProduct"
})(false ? undefined : {
  name: "1feckq",
  styles: "@media (min-width:768px){display:grid;grid-template-columns:2fr 1fr;column-gap:2rem;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var AuthorProduct = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_4__["default"])("p", {
  target: "e1a6wohe2",
  label: "AuthorProduct"
})(false ? undefined : {
  name: "1740ccn",
  styles: "padding:0.5rem 2rem;background-color:#7c3c21;color:#fff;text-trasform:uppercase;font-weight:bold;display:inline-block;text-align:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var _ref = false ? undefined : {
  name: "x7kg2o-Product",
  styles: "text-align:center;margin-top:5rem;;label:Product;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref2 = false ? undefined : {
  name: "cfosef-Product",
  styles: "margin:2rem 0;;label:Product;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref3 = false ? undefined : {
  name: "1bvpv2w-Product",
  styles: "border:1px solid #e1e1e1;padding:2rem;;label:Product;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ2FtaWxhIEJlcm5hbGVzXFxEb2N1bWVudHNcXFByb2dyYW1hY2lvblxcUkVBQ1RcXG5leHQtcHJvamVjdFxccGFnZXNcXHByb2R1Y3RzXFxbaWRdLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1OZ0MiLCJmaWxlIjoiQzpcXFVzZXJzXFxDYW1pbGEgQmVybmFsZXNcXERvY3VtZW50c1xcUHJvZ3JhbWFjaW9uXFxSRUFDVFxcbmV4dC1wcm9qZWN0XFxwYWdlc1xccHJvZHVjdHNcXFtpZF0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tIFwibmV4dC9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgRmlyZWJhc2VDb250ZXh0IH0gZnJvbSBcIi4uLy4uL2ZpcmViYXNlXCI7XHJcbmltcG9ydCBFcnJvcjQwNCBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9sYXlvdXQvNDA0XCI7XHJcbmltcG9ydCBMYXlvdXQgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvbGF5b3V0L0xheW91dFwiO1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tIFwiQGVtb3Rpb24vY29yZVwiO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcclxuaW1wb3J0IENsb2NrTG9hZGVyIGZyb20gXCJyZWFjdC1zcGlubmVycy9DbG9ja0xvYWRlclwiO1xyXG5pbXBvcnQgZm9ybWF0RGlzdGFuY2VUb05vdyBmcm9tIFwiZGF0ZS1mbnMvZm9ybWF0RGlzdGFuY2VUb05vd1wiO1xyXG5pbXBvcnQgeyBEaXYsIElucHV0U3VibWl0IH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvdWkvRm9ybVwiO1xyXG5pbXBvcnQgQm90b24gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvdWkvQm90b25cIjtcclxuXHJcbmNvbnN0IFBvc2l0aW9uID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWFyZ2luLXRvcDogNDV2aDtcclxuYDtcclxuY29uc3QgQ29udGFpbmVyUHJvZHVjdCA9IHN0eWxlZC5kaXZgXHJcbiAgQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAyZnIgMWZyO1xyXG4gICAgY29sdW1uLWdhcDogMnJlbTtcclxuICB9XHJcbmA7XHJcbmNvbnN0IEF1dGhvclByb2R1Y3QgPSBzdHlsZWQucGBcclxuICBwYWRkaW5nOiAwLjVyZW0gMnJlbTtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjN2MzYzIxO1xyXG4gIGNvbG9yOiAjZmZmO1xyXG4gIHRleHQtdHJhc2Zvcm06IHVwcGVyY2FzZTtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5gO1xyXG5jb25zdCBQcm9kdWN0ID0gKCkgPT4ge1xyXG4gIGNvbnN0IFtwcm9kdWN0LCBzZXRQcm9kdWN0XSA9IHVzZVN0YXRlKHt9KTtcclxuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbY29tbWVudCwgc2V0Q29tbWVudF0gPSB1c2VTdGF0ZSh7fSk7XHJcbiAgY29uc3QgW2ZldGNoREIsIHNldEZldGNoREJdID0gdXNlU3RhdGUodHJ1ZSk7XHJcbiAgXHJcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XHJcbiAgY29uc3Qge1xyXG4gICAgcXVlcnk6IHsgaWQgfSxcclxuICB9ID0gcm91dGVyO1xyXG5cclxuICBjb25zdCB7IGZpcmViYXNlLCB1c2VyIH0gPSB1c2VDb250ZXh0KEZpcmViYXNlQ29udGV4dCk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoaWQgJiYgZmV0Y2hEQikge1xyXG4gICAgICBjb25zdCBnZXRQcm9kdWN0ID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHByb2R1Y3RRdWVyeSA9IGF3YWl0IGZpcmViYXNlLmRiLmNvbGxlY3Rpb24oXCJwcm9kdWN0c1wiKS5kb2MoaWQpO1xyXG4gICAgICAgIGNvbnN0IHByb2R1Y3QgPSBhd2FpdCBwcm9kdWN0UXVlcnkuZ2V0KCk7XHJcbiAgICAgICAgaWYgKHByb2R1Y3QuZXhpc3RzKSB7XHJcbiAgICAgICAgICBzZXRQcm9kdWN0KHByb2R1Y3QuZGF0YSgpKTtcclxuICAgICAgICAgIHNldEZldGNoREIoZmFsc2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzZXRFcnJvcih0cnVlKTtcclxuICAgICAgICAgIHNldEZldGNoREIoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBnZXRQcm9kdWN0KCk7XHJcbiAgICB9XHJcbiAgfSwgW2lkXSk7XHJcblxyXG4gIGlmIChPYmplY3Qua2V5cyhwcm9kdWN0KS5sZW5ndGggPT09IDAgJiYgIWVycm9yKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8UG9zaXRpb24+XHJcbiAgICAgICAgPENsb2NrTG9hZGVyIGNvbG9yPXtcIiM3YzNjMjFcIn0gc2l6ZT17MTAwfSAvPlxyXG4gICAgICA8L1Bvc2l0aW9uPlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHtcclxuICAgIGNvbW1lbnRzLFxyXG4gICAgY29tcGFueSxcclxuICAgIGNyZWFkbyxcclxuICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgbmFtZSxcclxuICAgIHVybCxcclxuICAgIHZvdGVzLFxyXG4gICAgdXJsSW1hZ2UsXHJcbiAgICBhdXRob3IsXHJcbiAgICB2b3RlZGJ5LFxyXG4gIH0gPSBwcm9kdWN0O1xyXG5cclxuICBjb25zdCB2b3RlUHJvZHVjdCA9ICgpID0+IHtcclxuICAgIGlmICghdXNlcikge1xyXG4gICAgICByZXR1cm4gcm91dGVyLnB1c2goXCIvbG9naW5cIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCB2b3Rlc1RvdGFsID0gdm90ZXMgKyAxO1xyXG4gICAgaWYgKHZvdGVkYnkuaW5jbHVkZXModXNlci51aWQpKSByZXR1cm47XHJcbiAgICBjb25zdCBuZXd2b3RlZGJ5ID0gWy4uLnZvdGVkYnksIHVzZXIudWlkXTtcclxuXHJcbiAgICBmaXJlYmFzZS5kYlxyXG4gICAgICAuY29sbGVjdGlvbihcInByb2R1Y3RzXCIpXHJcbiAgICAgIC5kb2MoaWQpXHJcbiAgICAgIC51cGRhdGUoeyB2b3Rlczogdm90ZXNUb3RhbCwgdm90ZWRieTogbmV3dm90ZWRieSB9KTtcclxuXHJcbiAgICBzZXRQcm9kdWN0KHtcclxuICAgICAgLi4ucHJvZHVjdCxcclxuICAgICAgdm90ZXM6IHZvdGVzVG90YWwsXHJcbiAgICB9KTtcclxuICAgIHNldEZldGNoREIodHJ1ZSk7IC8vZmV0Y2ggbmV3IHZvdGVzXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgY29tbWVudENoYW5nZSA9IGUgPT4ge1xyXG4gICAgc2V0Q29tbWVudCh7XHJcbiAgICAgIC4uLmNvbW1lbnQsXHJcbiAgICAgIFtlLnRhcmdldC5uYW1lXTogZS50YXJnZXQudmFsdWUsXHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBjb25zdCBpc0F1dGhvciA9IChpZCkgPT4ge1xyXG4gICAgaWYgKGF1dGhvci5pZCA9PSBpZCkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBhZGRDb21tZW50ID0gKGUpID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGlmICghdXNlcikge1xyXG4gICAgICByZXR1cm4gcm91dGVyLnB1c2goXCIvbG9naW5cIik7XHJcbiAgICB9XHJcbiAgICBjb21tZW50LnVzZXJJZCA9IHVzZXIudWlkO1xyXG4gICAgY29tbWVudC51c2VyTmFtZSA9IHVzZXIuZGlzcGxheU5hbWU7XHJcblxyXG4gICAgY29uc3QgbmV3Q29tbWVudCA9IFsuLi5jb21tZW50cywgY29tbWVudF07XHJcbiAgICBmaXJlYmFzZS5kYi5jb2xsZWN0aW9uKCdwcm9kdWN0cycpLmRvYyhpZCkudXBkYXRlKHsgY29tbWVudHM6IG5ld0NvbW1lbnQgfSk7XHJcblxyXG4gICAgc2V0UHJvZHVjdCh7XHJcbiAgICAgIC4uLnByb2R1Y3QsXHJcbiAgICAgIGNvbW1lbnRzOiBuZXdDb21tZW50LFxyXG4gICAgfSk7XHJcbiAgICBzZXRGZXRjaERCKHRydWUpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGNhbkRlbGV0ZSA9ICgpID0+IHtcclxuICAgIGlmICghdXNlcikgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYgKGF1dGhvci5pZCA9PT0gdXNlci51aWQpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZGVsZXRlclByb2R1Y3REQiA9IGFzeW5jICgpID0+IHtcclxuICAgIGlmICghdXNlcikge1xyXG4gICAgICByZXR1cm4gcm91dGVyLnB1c2goXCIvbG9naW5cIik7XHJcbiAgICB9XHJcbiAgICBpZiAoYXV0aG9yLmlkICE9PSB1c2VyLnVpZCkge1xyXG4gICAgICByZXR1cm4gcm91dGVyLnB1c2goXCIvbG9naW5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgZmlyZWJhc2UuZGIuY29sbGVjdGlvbihcInByb2R1Y3RzXCIpLmRvYyhpZCkuZGVsZXRlKCk7XHJcbiAgICAgIHJvdXRlci5wdXNoKFwiL1wiKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHNldEVycm9yKHRydWUpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8TGF5b3V0PlxyXG4gICAgICA8PlxyXG4gICAgICAgIHtlcnJvciA/IChcclxuICAgICAgICAgIDxFcnJvcjQwNCAvPlxyXG4gICAgICAgICkgOiAoXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICA8aDFcclxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcclxuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDVyZW07XHJcbiAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIHtuYW1lfVxyXG4gICAgICAgICAgICA8L2gxPlxyXG4gICAgICAgICAgICA8Q29udGFpbmVyUHJvZHVjdD5cclxuICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPHA+UHVibGlzaGVkIHtmb3JtYXREaXN0YW5jZVRvTm93KG5ldyBEYXRlKGNyZWFkbykpfSBhZ288L3A+XHJcbiAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgICAgQXV0aG9yOiB7YXV0aG9yLm5hbWV9IG9mIHtjb21wYW55fVxyXG4gICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgPGltZyBzcmM9e3VybEltYWdlfSAvPlxyXG4gICAgICAgICAgICAgICAgPHA+e2Rlc2NyaXB0aW9ufTwvcD5cclxuICAgICAgICAgICAgICAgIHt1c2VyICYmIChcclxuICAgICAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgICAgICA8aDI+QWRkIGEgY29tbWVudDwvaDI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e2FkZENvbW1lbnR9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPERpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJtZXNzYWdlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17Y29tbWVudENoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvRGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPElucHV0U3VibWl0IHR5cGU9XCJzdWJtaXRcIiB2YWx1ZT1cIlNlbmRcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgPGgyXHJcbiAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMnJlbSAwO1xyXG4gICAgICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICBDb21tZW50c1xyXG4gICAgICAgICAgICAgICAgPC9oMj5cclxuICAgICAgICAgICAgICAgIHtjb21tZW50cy5sZW5ndGggPT09IDAgPyAoXHJcbiAgICAgICAgICAgICAgICAgIFwiQcO6biBubyBoYXkgY29tZW50YXJpb3NcIlxyXG4gICAgICAgICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgIHtjb21tZW50cy5tYXAoKGNvbW1lbnQsIGkpID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgIDxsaVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2Ake2NvbW1lbnQudXNlcklkfS0ke2l9YH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2UxZTFlMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cD57Y29tbWVudC5tZXNzYWdlfTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgQnk6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1wiXCJ9IHtjb21tZW50LnVzZXJOYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7aXNBdXRob3IoY29tbWVudC51c2VySWQpICYmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8QXV0aG9yUHJvZHVjdD5BdXRob3I8L0F1dGhvclByb2R1Y3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8YXNpZGU+XHJcbiAgICAgICAgICAgICAgICA8Qm90b24gdGFyZ2V0PVwiX2JsYW5rXCIgYmdDb2xvcj1cInRydWVcIiBocmVmPXt1cmx9PlxyXG4gICAgICAgICAgICAgICAgICBHbyB0byBVUkxcclxuICAgICAgICAgICAgICAgIDwvQm90b24+XHJcblxyXG4gICAgICAgICAgICAgICAge3VzZXIgPyAoXHJcbiAgICAgICAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgY3NzPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDVyZW07XHJcbiAgICAgICAgICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17Y3NzYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYH1cclxuICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3ZvdGVzfSBWb3Rlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPEJvdG9uIG9uQ2xpY2s9eygpID0+IHZvdGVQcm9kdWN0KCl9PlZvdGU8L0JvdG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8Lz5cclxuICAgICAgICAgICAgICAgICkgOiBudWxsfVxyXG4gICAgICAgICAgICAgIDwvYXNpZGU+XHJcbiAgICAgICAgICAgIDwvQ29udGFpbmVyUHJvZHVjdD5cclxuICAgICAgICAgICAge2NhbkRlbGV0ZSgpICYmIDxCb3RvbiBvbkNsaWNrPXtkZWxldGVyUHJvZHVjdERCfT5EZWxldGU8L0JvdG9uPn1cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICl9XHJcbiAgICAgIDwvPlxyXG4gICAgPC9MYXlvdXQ+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFByb2R1Y3Q7XHJcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref4 = false ? undefined : {
  name: "19lybcj-Product",
  styles: "font-weight:bold;;label:Product;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref5 = false ? undefined : {
  name: "vb0wzx-Product",
  styles: "margin-top:5rem;;label:Product;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref6 = false ? undefined : {
  name: "1r4466o-Product",
  styles: "text-align:center;;label:Product;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Product = function Product() {
  _s();

  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_5__["useState"])({}),
      product = _useState[0],
      setProduct = _useState[1];

  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_5__["useState"])(false),
      error = _useState2[0],
      setError = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_5__["useState"])({}),
      comment = _useState3[0],
      setComment = _useState3[1];

  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_5__["useState"])(true),
      fetchDB = _useState4[0],
      setFetchDB = _useState4[1];

  var router = Object(next_router__WEBPACK_IMPORTED_MODULE_6__["useRouter"])();
  var id = router.query.id;

  var _useContext = Object(react__WEBPACK_IMPORTED_MODULE_5__["useContext"])(_firebase__WEBPACK_IMPORTED_MODULE_7__["FirebaseContext"]),
      firebase = _useContext.firebase,
      user = _useContext.user;

  Object(react__WEBPACK_IMPORTED_MODULE_5__["useEffect"])(function () {
    if (id && fetchDB) {
      var getProduct = /*#__PURE__*/function () {
        var _ref7 = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default.a.mark(function _callee() {
          var productQuery, product;
          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default.a.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return firebase.db.collection("products").doc(id);

                case 2:
                  productQuery = _context.sent;
                  _context.next = 5;
                  return productQuery.get();

                case 5:
                  product = _context.sent;

                  if (product.exists) {
                    setProduct(product.data());
                    setFetchDB(false);
                  } else {
                    setError(true);
                    setFetchDB(false);
                  }

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function getProduct() {
          return _ref7.apply(this, arguments);
        };
      }();

      getProduct();
    }
  }, [id]);

  if (Object.keys(product).length === 0 && !error) {
    return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(Position, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 67,
        columnNumber: 7
      }
    }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(react_spinners_ClockLoader__WEBPACK_IMPORTED_MODULE_11___default.a, {
      color: "#7c3c21",
      size: 100,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 68,
        columnNumber: 9
      }
    }));
  }

  var comments = product.comments,
      company = product.company,
      creado = product.creado,
      description = product.description,
      name = product.name,
      url = product.url,
      votes = product.votes,
      urlImage = product.urlImage,
      author = product.author,
      votedby = product.votedby;

  var voteProduct = function voteProduct() {
    if (!user) {
      return router.push("/login");
    }

    var votesTotal = votes + 1;
    if (votedby.includes(user.uid)) return;
    var newvotedby = [].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(votedby), [user.uid]);
    firebase.db.collection("products").doc(id).update({
      votes: votesTotal,
      votedby: newvotedby
    });
    setProduct(_objectSpread(_objectSpread({}, product), {}, {
      votes: votesTotal
    }));
    setFetchDB(true); //fetch new votes
  };

  var commentChange = function commentChange(e) {
    setComment(_objectSpread(_objectSpread({}, comment), {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])({}, e.target.name, e.target.value)));
  };

  var isAuthor = function isAuthor(id) {
    if (author.id == id) {
      return true;
    }
  };

  var addComment = function addComment(e) {
    e.preventDefault();

    if (!user) {
      return router.push("/login");
    }

    comment.userId = user.uid;
    comment.userName = user.displayName;
    var newComment = [].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(comments), [comment]);
    firebase.db.collection('products').doc(id).update({
      comments: newComment
    });
    setProduct(_objectSpread(_objectSpread({}, product), {}, {
      comments: newComment
    }));
    setFetchDB(true);
  };

  var canDelete = function canDelete() {
    if (!user) return false;

    if (author.id === user.uid) {
      return true;
    }
  };

  var deleterProductDB = /*#__PURE__*/function () {
    var _ref8 = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default.a.mark(function _callee2() {
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (user) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", router.push("/login"));

            case 2:
              if (!(author.id !== user.uid)) {
                _context2.next = 4;
                break;
              }

              return _context2.abrupt("return", router.push("/login"));

            case 4:
              _context2.prev = 4;
              _context2.next = 7;
              return firebase.db.collection("products").doc(id)["delete"]();

            case 7:
              router.push("/");
              _context2.next = 13;
              break;

            case 10:
              _context2.prev = 10;
              _context2.t0 = _context2["catch"](4);
              setError(true);

            case 13:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[4, 10]]);
    }));

    return function deleterProductDB() {
      return _ref8.apply(this, arguments);
    };
  }();

  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(_components_layout_Layout__WEBPACK_IMPORTED_MODULE_9__["default"], {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 161,
      columnNumber: 5
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(react__WEBPACK_IMPORTED_MODULE_5___default.a.Fragment, null, error ? Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(_components_layout_404__WEBPACK_IMPORTED_MODULE_8__["default"], {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 164,
      columnNumber: 11
    }
  }) : Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
    className: "container",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 166,
      columnNumber: 11
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("h1", {
    css: _ref,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 167,
      columnNumber: 13
    }
  }, name), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(ContainerProduct, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 175,
      columnNumber: 13
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 176,
      columnNumber: 15
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("p", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 177,
      columnNumber: 17
    }
  }, "Published ", Object(date_fns_formatDistanceToNow__WEBPACK_IMPORTED_MODULE_12__["default"])(new Date(creado)), " ago"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("p", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 178,
      columnNumber: 17
    }
  }, "Author: ", author.name, " of ", company), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("img", {
    src: urlImage,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 181,
      columnNumber: 17
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("p", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 182,
      columnNumber: 17
    }
  }, description), user && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(react__WEBPACK_IMPORTED_MODULE_5___default.a.Fragment, null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("h2", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 185,
      columnNumber: 21
    }
  }, "Add a comment"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("form", {
    onSubmit: addComment,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 186,
      columnNumber: 21
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(_components_ui_Form__WEBPACK_IMPORTED_MODULE_13__["Div"], {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 187,
      columnNumber: 23
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("input", {
    type: "text",
    name: "message",
    onChange: commentChange,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 188,
      columnNumber: 25
    }
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(_components_ui_Form__WEBPACK_IMPORTED_MODULE_13__["InputSubmit"], {
    type: "submit",
    value: "Send",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 194,
      columnNumber: 23
    }
  }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("h2", {
    css: _ref2,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 198,
      columnNumber: 17
    }
  }, "Comments"), comments.length === 0 ? "Aún no hay comentarios" : Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("ul", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 208,
      columnNumber: 19
    }
  }, comments.map(function (comment, i) {
    return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("li", {
      key: "".concat(comment.userId, "-").concat(i),
      css: _ref3,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 210,
        columnNumber: 23
      }
    }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("p", {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 217,
        columnNumber: 25
      }
    }, comment.message), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("p", {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 218,
        columnNumber: 25
      }
    }, "By:", Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("span", {
      css: _ref4,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 220,
        columnNumber: 27
      }
    }, "", " ", comment.userName)), isAuthor(comment.userId) && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(AuthorProduct, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 229,
        columnNumber: 27
      }
    }, "Author"));
  }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("aside", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 236,
      columnNumber: 15
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(_components_ui_Boton__WEBPACK_IMPORTED_MODULE_14__["default"], {
    target: "_blank",
    bgColor: "true",
    href: url,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 237,
      columnNumber: 17
    }
  }, "Go to URL"), user ? Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(react__WEBPACK_IMPORTED_MODULE_5___default.a.Fragment, null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("div", {
    css: _ref5,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 243,
      columnNumber: 21
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])("p", {
    css: _ref6,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 248,
      columnNumber: 23
    }
  }, votes, " Votes"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(_components_ui_Boton__WEBPACK_IMPORTED_MODULE_14__["default"], {
    onClick: function onClick() {
      return voteProduct();
    },
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 255,
      columnNumber: 23
    }
  }, "Vote"))) : null)), canDelete() && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_10__["jsx"])(_components_ui_Boton__WEBPACK_IMPORTED_MODULE_14__["default"], {
    onClick: deleterProductDB,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 261,
      columnNumber: 29
    }
  }, "Delete"))));
};

_s(Product, "bfsUPURFdrpo2wMyp3pPBZ58bKg=", false, function () {
  return [next_router__WEBPACK_IMPORTED_MODULE_6__["useRouter"]];
});

_c = Product;
/* harmony default export */ __webpack_exports__["default"] = (Product);

var _c;

$RefreshReg$(_c, "Product");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports_1 = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports_1;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,